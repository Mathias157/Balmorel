###!/bin/sh
### General options
### -- specify queue --
#BSUB -q man
### -- set the job Name --
#BSUB -J DA_HC_operuns
### -- ask for number of cores (default: 1) --
#BSUB -n 20
### -- specify that we need a certain architecture --
#BSUB -R "select[model == XeonPlatinum8462Y]"
### -- specify that the cores must be on the same host --
#BSUB -R "span[hosts=1]"
### -- specify that we need X GB of memory per core/slot --
#BSUB -R "rusage[mem=2GB]"
### -- specify that we want the job to get killed if it exceeds X GB per core/slot --
#BSUB -M 2.1GB
### -- set walltime limit: hh:mm --
#BSUB -W 25:00
### -- set the email address --
#BSUB -u mberos@dtu.dk
### -- send notification at start --
##BSUB -B
### -- send notification at completion --
#BSUB -N
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o ./logs/DA_HC_operuns_%J.out
#BSUB -e ./logs/DA_HC_operuns_%J.err
# here follow the commands you want to execute with input.in as the input file

### Path to GAMS binary
export PATH=/appl/gams/47.6.0:$PATH

### Activate spatialstudy environment
source ~/miniconda3/bin/activate spatialstudy

for name in N10M2 N30M2 N50M2 N70M2 N30M10 N50M10 N70M10 N50M30 N70M30 N70M50; do

    # Copy most results from disaggregated run to simex
    cp -f ./simex_base/*.gdx ./simex

    # Disaggregate capacities
    if [ $name != "base" ]; then
        python simex/oper-input.py disagg $name base
    else
        echo "Skipping disaggregation due to running ${name} scenario"
    fi

    # Running Balmorel 
    cd DA_operun/model 
    gams Balmorel threads=$LSB_DJOB_NUMPROC --scenario_name="${name}_DA_operun"

    # Exit, if there are errors
    if [ $? -ne 0 ]; then
        echo "GAMS execution failed for scenario ${name}_DA_operun"
        exit 1
    fi
    
    cd ../../

    # Copy the simex folder
    # cp simex -r simex_$name

    # Analyse adequacy
    analyse adequacy ${name}_DA_operun
done